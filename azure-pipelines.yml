# Build Docker image for this app using Azure Pipelines
# http://docs.microsoft.com/azure/devops/pipelines/languages/docker?view=vsts
pool:
  vmImage: 'Ubuntu 16.04'

variables:
  buildConfiguration: 'Release'
  imageName: 'dotnetcore:$(Build.BuildId)'
  # define two more variables dockerId and dockerPassword in the build pipeline in UI

steps:
- task: DotNetCoreCLI@2
  displayName: dotnet Build Main CSPROJ
  inputs:
    projects: '**/dotnetcore-sample.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- script: |
    dotnet test dotnetcore-tests /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput='coverage.xml' --configuration $(buildConfiguration) --logger trx
    docker build -f Dockerfile -t $(dockerId).azurecr.io/$(imageName) .
    docker login -u $(dockerId) -p $pswd $(dockerid).azurecr.io
    docker push $(dockerId).azurecr.io/$(imageName)
  env:
    pswd: $(dockerPassword)

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '**/*coverage.xml'

- task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
  displayName: 'Check build quality'
  inputs:
    checkWarnings: true
    warningFailOption: fixed
    warningThreshold: 0

#- script: |
#    docker-compose -f docs/docker-compose.yml --project-directory . -p docs up -d |
#    docker wait docs_sut_1 |
#    docker-compose -f docs/docker-compose.yml --project-directory . down
